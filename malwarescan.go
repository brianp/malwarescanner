package main

import (
	"github.com/brianp/malwarescan/modules"

	"encoding/json"
	"fmt"
	"io"
	"net/http"
	_ "net/url"
)

type ScanStatus byte

const (
  BadFile ScanStatus = 1 << iota
  Ok      ScanStatus = 2
)

type ScanRequest struct {
	Source string `json:source`
}

type ScanResult struct {
  Source string     `json:source`
  Result ScanStatus `json:result`
}

func handler(resp http.ResponseWriter, req *http.Request) {
	switch req.Method {
	case "POST":
		scanRequest := parseBody(req.Body)
    defer req.Body.Close()

		file := modules.DownloadFile(scanRequest.Source)
    results := modules.Scan(file)

	  if status != nil {
      resp.WriteHeader(http.StatusInternalServerError)
      json.NewEncoder(w).Encode(results)

		  fmt.Fprintf(resp, "Virus found")
	  }
		// Remove file
		fmt.Fprintf(resp, "Hi there <3!")
	default:
		fmt.Fprintf(resp, "Request type not supported")
	}
}

func parseBody(body io.Reader) ScanRequest {
	var scan ScanRequest

	decoder := json.NewDecoder(body)
	decoder.Decode(&scan)

	return scan
}

func main() {
	http.HandleFunc("/scan", handler)
	http.ListenAndServe(":8080", nil)
}
